[gd_scene load_steps=5 format=3 uid="uid://b0c64x0dgua2v"]

[ext_resource type="PackedScene" uid="uid://b8luj06lh5dhv" path="res://scenes/environments/nexus/nexus_scene.tscn" id="1_o5qli"]
[ext_resource type="Script" uid="uid://dg5kkua4kcy68" path="res://scripts/game_manager.gd" id="4_tbgi4"]
[ext_resource type="Script" uid="uid://becqghg63mmpb" path="res://scripts/multiplayer/networks/network_manager.gd" id="5_tefeu"]

[sub_resource type="GDScript" id="GDScript_tbgi4"]
script/source = "extends Controller


## provides input to ActionContainer
## example of player controller

const DOUBLE_TAP_DELAY: float = 0.25

var _cam_pivot: Node3D
var _action_container: ActionContainer

var _last_input_window: float = 0.0
var _last_input: StringName
var _input_tracking: Dictionary[StringName, Variant] = \\
{
	\"move\":Vector3.ZERO,
	\"run\":false, 
	\"jump\":false, 
	\"slide\":false,
}


func _on_controlled_obj_change():
	if _action_container and _action_container.action_exit.is_connected(_on_action_exit):
		_action_container.action_exit.disconnect(_on_action_exit)
	
	_cam_pivot = controlled_obj.get_node(\"CamPivot\")
	if _cam_pivot.camera:
		_cam_pivot.camera.make_current()
	
	_action_container = controlled_obj.get_node(\"ActionContainer\")
	_action_container.action_exit.connect(_on_action_exit) # needed to prevent missed inputs
		# warning: can cause inf loop
		# evaluate_all_input -> stop_action -> action_exit -> evaluate_all_input
		# actions must not enter and exit in the same frame


func _process(delta: float) -> void:
	if _last_input_window > 0.0:
		_last_input_window -= delta
		if _last_input_window <= 0.0:
			_last_input = \"\"
	
	if Input.mouse_mode != Input.MOUSE_MODE_CAPTURED:
		return
	
	var input: Vector2 = Input.get_vector(\"move_left\", \"move_right\", \"move_forwards\", \"move_backwards\").rotated(-_cam_pivot.rotation.y)
	_input_tracking[\"move\"] = Vector3(input.x, 0.0, input.y)
	evaluate_input(\"move\")
	

func _unhandled_input(event: InputEvent) -> void:
	if Input.mouse_mode != Input.MOUSE_MODE_CAPTURED:
		return
	
	if event is InputEventMouseMotion:
		_cam_pivot.rotate_view(event.relative)
	
	for check in [\"run\", \"jump\", \"dash\"]:
		if event.is_action(check):
			var is_double: bool = false
			_input_tracking[check] = event.is_action_pressed(check)
			if event.is_action_pressed(check):
				if _last_input == \"\":
					_last_input = check
					_last_input_window = DOUBLE_TAP_DELAY
				elif _last_input == check:
					is_double = true
					_last_input = \"\"
					_last_input_window = 0.0
			evaluate_input(check, is_double)


func evaluate_input(key: String, double_tap: bool = false) -> void:
	match key:
		\"move\":
			_action_container.play_action(\"MOVE\", {\"input_direction\":_input_tracking[\"move\"], \"aim_direction\":_cam_pivot.get_cam_forward()})
		\"run\":
			if _input_tracking[key]:
				_action_container.play_action(\"RUN\")
			else:
				_action_container.stop_action(\"RUN\")
		\"jump\":
			if _input_tracking[key]:
				var should_jump: bool = true
				if double_tap:
					should_jump = not _action_container.play_action(\"TOGGLE_MOVE_STATE\")
				if should_jump:
					_action_container.play_action(\"JUMP\")
		\"dash\":
			if _input_tracking[key]:
				_action_container.play_action(\"DASH\")

func evaluate_all_input() -> void:
	for action in _input_tracking.keys():
		evaluate_input(action)


func _on_action_exit(_action_id: StringName) -> void:
	evaluate_all_input()
"

[node name="Main" type="Node3D"]

[node name="PlayerController" type="Node" parent="."]
script = SubResource("GDScript_tbgi4")

[node name="GameManager" type="Node" parent="."]
script = ExtResource("4_tbgi4")

[node name="NetworkManager" type="Node" parent="." node_paths=PackedStringArray("_players_spawn_node")]
unique_name_in_owner = true
script = ExtResource("5_tefeu")
_players_spawn_node = NodePath("../Players")

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="UseSteamButton" type="Button" parent="CanvasLayer"]
offset_left = 44.0
offset_top = 37.0
offset_right = 84.0
offset_bottom = 60.0
text = "Use Steam"

[node name="SteamHUD" type="Control" parent="CanvasLayer"]
unique_name_in_owner = true
layout_mode = 3
anchors_preset = 0
offset_left = 165.0
offset_top = 118.0
offset_right = 292.0
offset_bottom = 188.0

[node name="Panel" type="Panel" parent="CanvasLayer/SteamHUD"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Options" type="VBoxContainer" parent="CanvasLayer/SteamHUD/Panel"]
layout_mode = 0
offset_right = 127.0
offset_bottom = 66.0

[node name="Button" type="Button" parent="CanvasLayer/SteamHUD/Panel/Options"]
layout_mode = 2
text = "Host P2P Game"

[node name="Button2" type="Button" parent="CanvasLayer/SteamHUD/Panel/Options"]
layout_mode = 2
text = "List Lobbies"

[node name="Lobbies" type="ScrollContainer" parent="CanvasLayer/SteamHUD"]
layout_mode = 0
offset_left = 141.0
offset_top = 5.0
offset_right = 268.0
offset_bottom = 127.0

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/SteamHUD/Lobbies"]
custom_minimum_size = Vector2(40, 0)
layout_mode = 2

[node name="Button" type="Button" parent="CanvasLayer/SteamHUD/Lobbies/VBoxContainer"]
layout_mode = 2
text = "Button"

[node name="Label" type="Label" parent="CanvasLayer/SteamHUD/Lobbies/VBoxContainer"]
layout_mode = 2
text = "asdasd"

[node name="Players" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.77222776, 1.3741729, 0.76452255)

[node name="Level" type="Node" parent="."]

[node name="NexusScene" parent="Level" instance=ExtResource("1_o5qli")]

[connection signal="pressed" from="CanvasLayer/UseSteamButton" to="GameManager" method="use_steam"]
[connection signal="pressed" from="CanvasLayer/SteamHUD/Panel/Options/Button" to="GameManager" method="become_host"]
[connection signal="pressed" from="CanvasLayer/SteamHUD/Panel/Options/Button2" to="GameManager" method="list_steam_lobbies"]
